# -*- coding: utf-8 -*-
"""210903_penscomp_gruporandom.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/170XE9dYetdo3Hq7R_oEIvR5FtG6o78Jm

#Biblioteca **Random**
*Grupo 6*: Amanda, Isabela, Jamile, Sara e Tode
"""



"""# **Random**
Essa biblioteca oferece métodos para gerar números aleatórios, embaralhar listas e sortear item de sequências.

Pode ser uma distribuição de sequencia de nomes ou números, ou obtenção de uma amostra aleatória da sua base.

É uma ferramenta muito usada em análises estatísticas.

Serve para fazer previsões de probabilidade e simular eventos aleatórios, por exemplo.
"""

import random

"""## Tode  **random.shuffle**

###Sorteando a ordem de uma lista

"""

grupo = ['Isa','Jamile','Sara','Amanda'] #define grupo como uma lista de strings

random.shuffle(grupo) #sorteia a lista 'grupo'

participante1 = grupo[0] # define a variável participante1 como primeiro item da lista sorteada
participante2 = grupo[1] # define a variável participante2 como segundo item da lista sorteada
participante3 = grupo[2] # define a variável participante3 como terceiro item da lista sorteada
participante4 = grupo[3] # define a variável participante3 como terceiro item da lista sorteada

print(f"{participante1} foi a primeira sorteada") #exibe participante1
print(f"{participante2} foi a segunda sorteada") #exibe participante2
print(f"{participante3} foi a terceira sorteada") #exibe participante3
print(f"{participante3} foi a quarta sorteada") #exibe participante3

print("") # cria uma quebra de linha

print(f"{grupo}") #exibe a lista completa sorteada

"""##Amanda **random.sample**"""

amostra = list(range(0, 100)) #define "amostra" como uma lista de números entre 0 e 100

random.sample(amostra, 5) #seleciona 5 números únicos da sequência "amostra"

"""No exemplo acima, é definida uma sequência de números entre 0 e 100. A função random.sample seleciona a quantidade solicitada de variáveis únicas de forma aleatória e que não são substituídas da sequência inicial."""

amostra = list(range(0,100)) #cria uma sequência de números únicos entre 0 e 100

random.sample(amostra, 101) #solicita amostra maior do que a sequência criada. 

#O resultado é um erro, mostrando que a amostra é maior que a população

"""##Sara **random.random**, **random.uniform** e **ramdom.randit**

*   Esta função permite gerar valores sempre entre 0.0 a 1.0
*   Também é possível fazer cálculo para obter números acima de 1.0

**random.random**
"""

print(random.random())  #valor float entre 0 e 1

print(random.random()*10) #valor float entre 0 e 10

print(random.random()*100) #valor float entre 0 e 100



"""*   Se você quiser números inteiros pode  usar "**math.ceil**" (arredondar pra cima)"""

import math 

print(math.ceil(10 * random.random())) #valor inteiro arredondado

"""**random.uniform** e **ramdom.randit**

*   Para obter valores **float** entre o mínimo e o máximo
*   Para obter valores **inteiros** entre o mínimo e o máximo
"""

print(random.uniform(0,7)) #valores float do mínimo ao máximo

print(random.randint(50,100)) #valores int do mínimo ao máximo

"""## Isa **random.choices**"""

Cores = ['Vermelho','Preto','Verde'] #Para simular 10 rodadas de um disco que gira com essas cores

Resultados = random.choices(Cores, k=10) #Função para sequências

print(Resultados)

#Como a gente colocou k=10, ele retorna 10 resultados aleatórios

"""Da forma apresentada acima, cada cor tem a mesma chance de ser sorteada. Mas se por exemplo no disco eu tiver mais cores "verde" ou "preto", as chances aumentam de cair nessas cores. Então, eu posso "pesar" essa quantidade com o argumento "weight" para que o sorteio leve essas chances em consideração. """

Cores = ['Vermelho','Preto','Verde']

Resultados = random.choices(Cores, weights=[1,4,4], k=10) #o argumento de peso da chance será uma lista na ordem respectiva das cores que eu setei 

print(Resultados) #somando os pesos eu tenho 9, entao por exemplo vermelho tem 1/9 chances, preto tem 4/9

"""##Jamile **Jogando Cara e Coroa**"""

import numpy as np #importa um gerador de números aleatórios

np.random.seed(123) #seed, significa "todas as vezes", então aqui ele vai criar sempre os mesmos números dentro de um intervalo

sorteio = []  #inicia uma lista vazia

for x in range (10): #cria um loop de sorteio que deve ser executado dez vezes
  coin = np.random.randint(0, 2)  #cria uma lista de valores aleatórios que podem ser gerados 
  if coin == 0: #cria a moeda cara
    sorteio.append('cara')
  else :
    sorteio.append('coroa') #cria a moeda coroa

print(sorteio)